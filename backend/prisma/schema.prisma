// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                  String                @id @default(uuid())
  name                String?
  email               String                @unique
  image               String?
  password            String
  role                UserRole              @default(USER)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  Problem             Problem[]
  Submission          Submission[]
  solvedProblem       ProblemSolved[]
  playlists           Playlist[]
  ContestRegistration ContestRegistration[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcase          Json
  codeSnippet       Json
  referenceSolution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relationShip
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  Submission         Submission[]
  solvedBy           ProblemSolved[]
  problemInPlayLists ProblemInPlayList[]
  ContestProblem     ContestProblem[]
}

model Submission {
  id             String  @id @default(uuid())
  userId         String
  problemId      String
  sourceCode     Json
  language       String
  stdin          String?
  stdout         String?
  time           String?
  stderr         String?
  compile_output String?
  status         String
  memory         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem           @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TeastCaseResult[]
}

model TeastCaseResult {
  id            String  @id @default(uuid())
  submissionId  String
  testcase      Int
  passed        Boolean
  stdout        String?
  expected      String
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String @id @default(uuid())
  userId    String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String @id @default(uuid())
  name        String
  description String
  userId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem ProblemInPlayList[]
  user    User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) //unique playlist for each user
}

model ProblemInPlayList {
  id         String @id @default(uuid())
  playListId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playListId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}

model Contest {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  startTime           DateTime
  endTime             DateTime
  problems            ContestProblem[]
  createdAt           DateTime              @default(now())
  createdBy           String
  ContestRegistration ContestRegistration[]
}

model ContestProblem {
  id        String  @id @default(uuid())
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId String
  problem   Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId String
  marks     Int     @default(0)
}

model ContestSubmission {
  id        String @id @default(uuid())
  userId    String
  contestId String
  problemId String

  sourceCode     Json
  language       String
  stdin          String? 
  stdout         String?
  time           String?
  stderr         String?
  compile_output String?
  status         String
  memory         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContestRegistration {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  contest   Contest @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, contestId])
}
